/* tslint:disable */
/* eslint-disable */
/**
 * densys
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatientPublic
 */
export interface PatientPublic {
    /**
     * 
     * @type {number}
     * @memberof PatientPublic
     */
    iin: number;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    surname: string;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    middle_name: string;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    contact_number: string;
    /**
     * 
     * @type {Date}
     * @memberof PatientPublic
     */
    day_of_birth: Date;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    blood_group: string;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    emergency_contact_number: string;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientPublic
     */
    address: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatientPublic
     */
    marital_status?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PatientPublic
     */
    registration_date?: Date;
}

/**
 * Check if a given object implements the PatientPublic interface.
 */
export function instanceOfPatientPublic(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "iin" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "surname" in value;
    isInstance = isInstance && "middle_name" in value;
    isInstance = isInstance && "contact_number" in value;
    isInstance = isInstance && "day_of_birth" in value;
    isInstance = isInstance && "blood_group" in value;
    isInstance = isInstance && "emergency_contact_number" in value;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function PatientPublicFromJSON(json: any): PatientPublic {
    return PatientPublicFromJSONTyped(json, false);
}

export function PatientPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatientPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'iin': json['iin'],
        'name': json['name'],
        'surname': json['surname'],
        'middle_name': json['middle_name'],
        'contact_number': json['contact_number'],
        'day_of_birth': (new Date(json['day_of_birth'])),
        'blood_group': json['blood_group'],
        'emergency_contact_number': json['emergency_contact_number'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'address': json['address'],
        'marital_status': !exists(json, 'marital_status') ? undefined : json['marital_status'],
        'registration_date': !exists(json, 'registration_date') ? undefined : (new Date(json['registration_date'])),
    };
}

export function PatientPublicToJSON(value?: PatientPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'iin': value.iin,
        'name': value.name,
        'surname': value.surname,
        'middle_name': value.middle_name,
        'contact_number': value.contact_number,
        'day_of_birth': (value.day_of_birth.toISOString().substr(0,10)),
        'blood_group': value.blood_group,
        'emergency_contact_number': value.emergency_contact_number,
        'email': value.email,
        'address': value.address,
        'marital_status': value.marital_status,
        'registration_date': value.registration_date === undefined ? undefined : (value.registration_date.toISOString().substr(0,10)),
    };
}

